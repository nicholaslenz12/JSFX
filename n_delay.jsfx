/*
 Nicholas Lenz
 Github : nicholaslenz12@gmail.com

 Single tap delay. Can also modulate the delay between the left and right channel
 (Ping-Pong). Can be synced to project tempo.

 Needs help:
 - Needs sample-accurate automation for delay length changes
 > Make GUI like:
   |     |     |         |     |     |
   | | : | | : | | : ->  | : | | : | | :
   -----------------    -----------------
 */

desc:N-Delay

// ----------------------------------------------------------------------------
// SLIDER DEFINITIONS
// ----------------------------------------------------------------------------
slider1:200<1,2000,1>Length (ms)
slider2:50<0,100,1>Feedback
slider3:50<0,100,1>Mix
slider4:100<-100,100,1>Width
slider5:.5<.125,1,.125>Fraction of Quarter Note
slider6:1<0,1,{Off,On}>Tempo Sync
slider7:1<0,1,{Stereo,Ping-Pong}>Delay Mode

// ----------------------------------------------------------------------------
// DEFAULT CHANNEL CONFIGURATION
// ----------------------------------------------------------------------------
in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

// ----------------------------------------------------------------------------
// INIT
// ----------------------------------------------------------------------------
@init
init = 1;
cycle_pos = 0;

src_len      = tgt_len      = slider1;
src_feedback = tgt_feedback = slider2/100;
src_mix      = tgt_mix      = slider3/100;
src_width    = tgt_width    = (slider4+100)/200;
src_rate     = tgt_rate     = slider5;

// ----------------------------------------------------------------------------
// SLIDER
// ----------------------------------------------------------------------------
@slider
tgt_len      = slider1;
tgt_feedback = slider2/100;
tgt_mix      = slider3/100;
tgt_width    = (slider4+100)/200;
tgt_rate     = slider5;
tempo_sync   = slider6;
delay_mode   = slider7;

delay_mode == 1 ? pp = 0;

// ----------------------------------------------------------------------------
// BLOCK
// ----------------------------------------------------------------------------
@block
// set delay length in samples.

d_delay_len  = 0;
d_delta_size = 0;

init ?
(
    tempo_sync ?
    (
        delay_len = src_rate*srate*60/tempo;
        delta_size = delay_len/10;
    ) :
    (
        delay_len = slider1*srate/1000;
        delta_size = delay_len/10;
    );
    init = 0;
);

d_len      = (tgt_len - src_len)/samplesblock;
d_mix      = (tgt_mix - src_mix)/samplesblock;
d_feedback = (tgt_feedback - src_feedback)/samplesblock;
d_width    = (tgt_width - src_width)/samplesblock;
d_rate     = (tgt_rate - src_rate)/samplesblock;

t_len       = src_len;
t_mix       = src_mix;
t_feedback  = src_feedback;
t_width     = src_width;
t_rate      = src_rate;
t_delay_len = src_delay_len;

src_len      = tgt_len;
src_mix      = tgt_mix;
src_feedback = tgt_feedback;
src_width    = tgt_width;
src_rate     = tgt_rate;

tempo_sync && d_rate != 0 ?
(
    d_delay_len  = d_rate*srate*60/tempo; // Questionable
    d_delta_size = d_delay_len/10;
);

!tempo_sync && d_len != 0 ?
(
    d_delay_len  = d_len*srate/1000; // Questionable
    d_delta_size = d_delay_len/10;
);

// ----------------------------------------------------------------------------
// SAMPLE
// ----------------------------------------------------------------------------
@sample
t_len      += d_len;
t_mix      += d_mix;
t_feedback += d_feedback;
t_width    += d_width;
t_rate     += d_rate;
delay_len  += d_delay_len;
delta_size += d_delta_size;

// Allocate memory
delay_buffer = 2*cycle_pos;
effect_left  = delay_buffer[0];
effect_right = delay_buffer[1];

delta_width = ((delta_size - delta)*t_width + delta*(1 - t_width))/delta_size;
delta_rev_width = 1 - delta_width;

delay_mode > 0 ? // If set to Ping-Pong
(
    // Set value in feedback loop, per channel
    delay_buffer[0] = ave + effect_left*t_feedback;
    delay_buffer[1] = ave + effect_right*t_feedback;
    ave = (spl0 + spl1)/2;

    pp == 0 ? // Current echo is in left channel
    (
        // Set current sample value, per channel
        spl0 = ave*(1 - t_mix) + delta_width*effect_left*t_mix;
        spl1 = ave*(1 - t_mix) + delta_rev_width*effect_right*t_mix;
    ) :  // Current echo is in left channel
    (
        // Set current sample value, per channel
        spl0 = ave*(1 - t_mix) + delta_rev_width*effect_left*t_mix;
        spl1 = ave*(1 - t_mix) + delta_width*effect_right*t_mix;
    );
): // If set to Stereo
(
    // Set value in feedback loop, per channel
    delay_buffer[0] = spl0 + effect_left*t_feedback;
    delay_buffer[1] = spl1 + effect_right*t_feedback;

    // Set current sample value, per channel
    spl0 = spl0*(1 - t_mix) + effect_left*t_mix;
    spl1 = spl1*(1 - t_mix) + effect_right*t_mix;
);

delta > 0 ? delta -= 1 : delta = 0;

cycle_pos += 1 > delay_len ? // If last sample for current echo reached
(
    cycle_pos = 0; // Reset sample position of delay
    pp = 1 - pp; // Switch primary channel for Ping-Pong
    delta = delta_size;
);

// ----------------------------------------------------------------------------
// GRAPHICS
// ----------------------------------------------------------------------------
// ...
