desc:NARP
options:gfx_hz=60

import knobs.jsfx
import shapes.jsfx
import math.jsfx
import defines.jsfx
import data_structures.jsfx
import testing.jsfx
import buttons.jsfx
import states.jsfx

// ----------------------------------------------------------------------------
// SLIDER DEFINITIONS
// ----------------------------------------------------------------------------
slider1:3<0,5,1{1/1,1/2, 1/4, 1/8, 1/16, 1/32}>-Rate (Synced)
slider2:1<0.01,1,0.01>-Length
slider3:0<0,2,1{Up,Down,Root Descend}>Direction
slider4:0<0,2,1{Straight,Dotted,Triplet}>-Note Modifier

// ----------------------------------------------------------------------------
// DEFAULT CHANNEL CONFIGURATION
// ----------------------------------------------------------------------------
in_pin:none
out_pin:none

// ----------------------------------------------------------------------------
// INIT
// ----------------------------------------------------------------------------
@init
__RUN_TESTS__ ? run_tests();

gfx_ext_retina = 1;

function check_hover() (
    this.type == BUTTON ? (
        this.check_in_rect();
    ) : (this.type == KNOB) ? (
        this.check_in_circle();
    ) : (
        __PROG_STATE__ = BAD;
    );
);

BACKGROUND.color_create(LIGHTORANGE.r, LIGHTORANGE.g, LIGHTORANGE.b);

// Nice if we can do this more programmatically
rate_knob.knob_create(1/2, 0.4, 0.27, 0, 5, 3, 1);
rate_knob.font.font_create(1, "Arial", 0.15); // wrapper around gfx_setfont
rate_knob.formatter.formatter_create("1/%d", "Power", "");
rate_knob.colors_shapes.color_create(COFFEE.r, COFFEE.g, COFFEE.b);
rate_knob.colors_font.color_create(COFFEE.r, COFFEE.g, COFFEE.b);
rate_knob.colors.color_create(LIGHTORANGE.r, LIGHTORANGE.g, LIGHTORANGE.b);
rate_knob.colors_hover.color_create(LIGHTORANGE.r, LIGHTORANGE.g, LIGHTORANGE.b);
rate_knob.hover_text = "Inverse notes per beat.";

length_knob.knob_create(0.825, 0.85, 0.08, 0.01, 1, 1, 2);
length_knob.font.font_create(1, "Arial", 0.04);
length_knob.formatter.formatter_create("%0.2f", "Direct", "Length");
length_knob.colors_shapes.color_create(COFFEE.r, COFFEE.g, COFFEE.b);
length_knob.colors_font.color_create(COFFEE.r, COFFEE.g, COFFEE.b);
length_knob.colors.color_create(SOFTORANGE.r, SOFTORANGE.g, SOFTORANGE.b);
length_knob.colors_hover.color_create(GORANGE.r, GORANGE.g, GORANGE.b);
length_knob.hover_text = "MIDI note duration.";

// ARP DIRECTIONS ----
button_up.button_create(0.75, 0.1, 0.165, 0.12, 3);
button_up.colors_shapes.color_create(COFFEE.r, COFFEE.g, COFFEE.b);
button_up.colors_hover.color_create(SIGHTORANGE.r, SIGHTORANGE.g, SIGHTORANGE.b);
button_up.colors_clicked.color_create(LIGHTORANGE.r, LIGHTORANGE.g, LIGHTORANGE.b);
button_up.font.font_create(1, "Arial", 0.05); // wrapper around gfx_setfont
button_up.colors_font.color_create(COFFEE.r, COFFEE.g, COFFEE.b);
button_up.formatter.formatter_create("", "", "");
button_up.hover_text = "Notes play up.";

button_down.button_create(0.75, 0.26, 0.165, 0.12, 3);
button_down.colors_shapes.color_create(COFFEE.r, COFFEE.g, COFFEE.b);
button_down.colors_hover.color_create(SIGHTORANGE.r, SIGHTORANGE.g, SIGHTORANGE.b);
button_down.colors_clicked.color_create(LIGHTORANGE.r, LIGHTORANGE.g, LIGHTORANGE.b);
button_down.font.font_create(1, "Arial", 0.05); // wrapper around gfx_setfont
button_down.colors_font.color_create(COFFEE.r, COFFEE.g, COFFEE.b);
button_down.formatter.formatter_create("", "", "");
button_down.hover_text = "Notes play down.";

button_descend.button_create(0.75, 0.42, 0.165, 0.12, 3);
button_descend.colors_shapes.color_create(COFFEE.r, COFFEE.g, COFFEE.b);
button_descend.colors_hover.color_create(SIGHTORANGE.r, SIGHTORANGE.g, SIGHTORANGE.b);
button_descend.colors_clicked.color_create(LIGHTORANGE.r, LIGHTORANGE.g, LIGHTORANGE.b);
button_descend.font.font_create(1, "Arial", 0.05); // wrapper around gfx_setfont
button_descend.colors_font.color_create(COFFEE.r, COFFEE.g, COFFEE.b);
button_descend.formatter.formatter_create("", "", "");
button_descend.hover_text = "Notes play down.";

// NOTE MODIFIERS ----
button_straight.button_create(0.44, 0.8, 0.12, 0.12, 4);
button_straight.colors_hover.color_create(SIGHTORANGE.r, SIGHTORANGE.g, SIGHTORANGE.b);
button_dotted.button_create(  0.62, 0.8, 0.12, 0.12, 4);
button_dotted.colors_hover.color_create(SIGHTORANGE.r, SIGHTORANGE.g, SIGHTORANGE.b);
button_triplet.button_create( 0.26, 0.8, 0.12, 0.12, 4);
button_triplet.colors_hover.color_create(SIGHTORANGE.r, SIGHTORANGE.g, SIGHTORANGE.b);

t_beat = 0;

prev_note_ons = 0;
note_on_count = 1;

note_list = 0; // stores binary for key pressed, native reaper arp uses velocities
current_note_idx = -1;
playing_note = 0;

// ----------------------------------------------------------------------------
// SLIDER
// ----------------------------------------------------------------------------
@slider
rate_knob.knob_detect_slider();
length_knob.knob_detect_slider();
button_up.button_detect_slider(0);
button_down.button_detect_slider(1);
button_descend.button_detect_slider(2);
button_straight.button_detect_slider(0);
button_dotted.button_detect_slider(1);
button_triplet.button_detect_slider(2);

// ----------------------------------------------------------------------------
// BLOCK
// ----------------------------------------------------------------------------
@block
prev_list_len = note_list.length;
while (midirecv(offset, cmd, note, vel)) (
    cmd == NOTE_ON && vel > 0 ? ( // Add note to the note list
        !note_list.contains(note) ? (
            note_list.push(note);
        );
    ) : (cmd == NOTE_OFF || cmd == NOTE_ON) ? ( // Remove note from note list, (kill note if being played)
        note_list.contains(note) ? (
            midisend(offset, NOTE_OFF, note);
            current_note = NONE;
        );
        note_list.remove(note);
    ) : ( // passthrough other events
        midisend(offset, cmd, key, vel);
    );
);

// kill any dangling notes (risk of FLP error?)
note_list.length == 0 && current_note != NONE ? (
    midisend(0, NOTE_OFF, current_note);
    current_note = NONE;
);

// can we do this elsewhere?
beat_fraction = 2 ^ -slider(rate_knob.slider_idx);
note_mod = slider4 == 0 ? 1 : slider4 == 1 ? 3 / 2 : 2 / 3;
cycle_rate = 1/srate * tempo/60 / beat_fraction / 4 / note_mod;
sample_position = 0;

// Just starting, so start playout of next note immediately
note_list.length > 0 && prev_list_len == 0 ? (
    t_beat = mod_pos(beat_position, (4*beat_fraction*note_mod)) / (4*beat_fraction*note_mod);
    play_immediately = 1;
    prev_note_ons = 1;
);

// ----------------------------------------------------------------------------
// SAMPLE
// ----------------------------------------------------------------------------
@sample
t_beat += cycle_rate;

note_list.length > 0 && (t_beat >= 1 || play_immediately) && !playing_note ? (
    !play_immediately ? t_beat -= 1;
    slider3 == 0 || slider3 == 1 ? (
        current_note = note_list.find_next_cyclic(current_note, slider3 == 0 ? FORWARD : BACKWARD);
    ) : (
        old_current = current_note;
        current_note = note_list.root_descend(current_note, previous_note);
        previous_note = old_current;
    );
    midisend(sample_position, NOTE_ON, current_note, 127);
    playing_note = 1;
    play_immediately = 0;
);

note_list.length > 0 && t_beat >= slider(length_knob.slider_idx) && playing_note ? (
    midisend(sample_position, NOTE_OFF, current_note, 127);
    playing_note = 0;
);

sample_position += 1;
// ----------------------------------------------------------------------------
// GRAPHICS
// ----------------------------------------------------------------------------
@gfx 600 400

BACKGROUND.gfx_colors_from_color();
gfx_rect(0, 0, gfx_w, gfx_h);

// gfx_a = 0.3;

rate_knob.knob_draw();
rate_knob.knob_detect_reset();
rate_knob.check_focus() ? (
    rate_knob.knob_detect_drag();
);
rate_knob.knob_update_slider(1);
rate_knob.knob_draw_arrows();
// sliderchange(slider1);

length_knob.knob_draw();
length_knob.knob_detect_reset();
length_knob.check_focus() ? (
    length_knob.knob_detect_drag();
);
length_knob.knob_update_slider(0.01);

old_slider = slider3;
button_up.button_detect_click(0);
button_down.button_detect_click(1);
button_descend.button_detect_click(2);
button_up.button_update_slider(old_slider, 0);
button_down.button_update_slider(old_slider, 1);
button_descend.button_update_slider(old_slider, 2);
button_up.button_draw();
button_down.button_draw();
button_descend.button_draw();
button_up.button_draw_up_rect();
button_down.button_draw_down_rect();

old_slider = slider4;
button_straight.button_detect_click(0);
button_dotted.button_detect_click(1);
button_triplet.button_detect_click(2);
button_straight.button_update_slider(old_slider, 0);
button_dotted.button_update_slider(old_slider, 1);
button_triplet.button_update_slider(old_slider, 2);

button_straight.button_draw();
button_dotted.button_draw();
button_triplet.button_draw();

// gfx_a = 1;
// SIGHTORANGE.gfx_colors_from_color();
// gfx_rect(200, 200, 800, 600);

COFFEE.gfx_colors_from_color();
#hover_text = "";
rate_knob.check_hover() ? #hover_text = rate_knob.hover_text;
length_knob.check_hover() ? #hover_text = length_knob.hover_text;
button_up.check_hover() ? #hover_text = button_up.hover_text;
button_down.check_hover() ? #hover_text = button_down.hover_text;
hover.font_create(1, "Arial", 0.032);
hover.set_from_font();
gfx_x = gfx_w * 0.015;
gfx_y = gfx_h * 0.95;
gfx_drawstr(#hover_text);

__PROG_STATE__   != GOOD ? gfx_drawstr("BAD PROG STATE");
__TEST_RESULTS__ != GOOD ? gfx_drawstr("TEST REGRESSION");
