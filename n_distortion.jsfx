/*
 Nicholas Lenz
 Github : nicholaslenz12@gmail.com
 Distorts a signal based on 4 non-linear functions.
 audio from 2-channels can first be converted to 1-channel before processing,
 or the processing can be applied to both channels.

 The types of distortion are:
 Tanh
 Arctan
 Cubic (x^3) (potential for higher-order, odd poly's later)
 Sine
 */
desc: N-Distortion

// ----------------------------------------------------------------------------
// SLIDER DEFINITIONS
// ----------------------------------------------------------------------------
slider1:0<0,3,1{Tanh,Arctan,Cubic,Sine}>Distortion Type
slider2:12<-30,30,1>Input Gain (dB)
slider3:-12<-30,30,1>Output Gain (dB)
slider4:2<0,2,1{Left,Right,Stereo}>Channel Mode

// ----------------------------------------------------------------------------
// DEFAULT CHANNEL CONFIGURATION
// ----------------------------------------------------------------------------
in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

// ----------------------------------------------------------------------------
// INIT
// ----------------------------------------------------------------------------
@init

// Constants
halfpi = 2*atan(1);

function tanh(x)
(
  2/(1+7.389^(-x))-1;
);

function arctan(x)
(
  atan(halfpi*x)/halfpi;
);

function cubic(x)
(
  abs(x) <= 1 ? x - x^3/3 : sign(x)*2/3;
);

function sine(x)
(
  abs(x) <= 1 ? sin(halfpi*x)/halfpi : sign(x);
);


// ----------------------------------------------------------------------------
// SLIDER
// ----------------------------------------------------------------------------
@slider

mode   = slider1;
pre    = 2^(slider2/6);
post   = 2^(slider3/6);
cmode  = slider4;



// ----------------------------------------------------------------------------
// SAMPLE
// ----------------------------------------------------------------------------
@sample

cmode == 0 ? // mono left
(
  mode == 0 ?
  (
    spl0 = post*tanh(pre*spl0);
  ) : mode == 1 ?
  (
    spl0 = post*arctan(pre*spl0);
  ) : mode == 2 ?
  (
    spl0 = post*cubic(pre*spl0);
  ) : mode == 3 ?
  (
    spl0 = post*sine(pre*spl0);
  );
  spl1 = spl0;
) : cmode == 1 ? // mono right
(
  mode == 0 ?
  (
    spl1 = post*tanh(pre*spl1);
  ) : mode == 1 ?
  (
    spl1 = post*arctan(pre*spl1);
  ) : mode == 2 ?
  (
    spl1 = post*cubic(pre*spl1);
  ) : mode == 3 ?
  (
    spl1 = post*sine(pre*spl1);
  );
  spl0  = spl1;
) : cmode == 2 ? // stereo
(
  mode == 0 ?
  (
    spl0 = post*tanh(pre*spl0);
    spl1 = post*tanh(pre*spl1);
  ) : mode == 1 ?
  (
    spl0 = post*arctan(pre*spl0);
    spl1 = post*arctan(pre*spl1);
  ) : mode == 2 ?
  (
    spl0 = post*cubic(pre*spl0);
    spl1 = post*cubic(pre*spl1);
  ) : mode == 3 ?
  (
    spl0 = post*sine(pre*spl0);
    spl1 = post*sine(pre*spl1);
  );
);
